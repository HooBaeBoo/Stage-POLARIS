# -*- mode: org -*-
# -*- coding: utf-8 -*-
#+STARTUP: overview indent inlineimages logdrawer
#+TITLE:       Journal
#+AUTHOR:      EZ-ZINE Najwa
#+LANGUAGE:    en, fr
#+TAGS: LIG(L) 
#+TAGS:  OrgMode(O)
#+EXPORT_SELECT_TAGS: Blog
#+OPTIONS:   H:3 num:t toc:t \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:nil skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+COLUMNS: %25ITEM %TODO %3PRIORITY %TAGS
#+SEQ_TODO: TODO(t!) STARTED(s!) WAITING(w@) APPT(a!) | DONE(d!) CANCELLED(c!) DEFERRED(f!)

* 2018
** 2018-02 March
*** 2018-02-12 Monday

**** [[https://github.com/alegrand/RR_webinars/blob/master/1_replicable_article_laboratory_notebook/index.org][First webinar on reproducible research: litterate programming]]
***** Emacs shortcuts
Here are a few convenient emacs shortcuts for those that have never
used emacs. In all of the emacs shortcuts, =C=Ctrl=, =M=Alt/Esc= and
=S=Shift=.  Note that you may want to use two hours to follow the emacs
tutorial (=C-h t=). In the configuration file CUA keys have been
activated and allow you to use classical copy/paste (=C-c/C-v=)
shortcuts. This can be changed from the Options menu.
  - =C-x C-c= exit
  - =C-x C-s= save buffer
  - =C-g= panic mode ;) type this whenever you want to exit an awful
    series of shortcuts
  - =C-Space= start selection marker although selection with shift and
    arrows should work as well
  - =C-l= reposition the screen
  - =C-_= (or =C-z= if CUA keys have been activated)
  - =C-s= search
  - =M-%= replace
  - =C-x C-h= get the list of emacs shortcuts
  - =C-c C-h= get the list of emacs shortcuts considering the mode you are
    currently using (e.g., C, Lisp, org, ...)
  There are a bunch of cheatsheets also available out there (e.g.,
  [[http://www.shortcutworld.com/en/linux/Emacs_23.2.1.html][this one for emacs]] and [[http://orgmode.org/orgcard.txt][this one for org-mode]] or this [[http://sachachua.com/blog/wp-content/uploads/2013/05/How-to-Learn-Emacs-v2-Large.png][graphical one]]).
***** Org-mode                                                  :OrgMode:
  Many emacs shortcuts start by =C-x=. Org-mode's shortcuts generaly
  start with =C-c=.
  - =Tab= fold/unfold
  - =C-c c= capture (finish capturing with =C-c C-c=, this is explained on
    the top of the buffer that just opened)
  - =C-c C-c= do something useful here (tag, execute, ...)
  - =C-c C-o= open link
  - =C-c C-t= switch todo
  - =C-c C-e= export
  - =M-Enter= new item/section
  - =C-c a= agenda (try the =L= option)
  - =C-c C-a= attach files
  - =C-c C-d= set a deadl1ine (use =S-arrows= to navigate in the dates)
  - =A-arrows= move subtree (add shift for the whole subtree)
***** Org-mode Babel (for literate programming)                 :OrgMode:
  - =<s + tab= template for source bloc. You can easily adapt it to get
    this:
    #+BEGIN_EXAMPLE
      #+begin_src shell
      ls
      #+end_src
    #+END_EXAMPLE
    Now if you =C-c C-c=, it will execute the block.
    #+BEGIN_EXAMPLE
  #+RESULTS:
  | #journal.org# |
  | journal.html  |
  | journal.org   |
  | journal.org~  |
    #+END_EXAMPLE
  
  - Source blocks have many options (formatting, arguments, names,
    sessions,...), which is why I have my own shortcuts =<b + tab= bash
    block (or =B= for sessions).
    #+BEGIN_EXAMPLE 
  #+begin_src shell :results output :exports both
  ls /tmp/*201*.pdf
  #+end_src

  #+RESULTS:
  : /tmp/2015_02_bordeaux_otl_tutorial.pdf
  : /tmp/2015-ASPLOS.pdf
  : /tmp/2015-Europar-Threadmap.pdf
  : /tmp/europar2016-1.pdf
  : /tmp/europar2016.pdf
  : /tmp/M2-PDES-planning-examens-janvier2016.pdf
    #+END_EXAMPLE
  - I have defined many such templates in my configuration. You can
    give a try to =<r=, =<R=, =<RR=, =<g=, =<p=, =<P=, =<m= ...
  - Some of these templates are not specific to babel: e.g., =<h=, =<l=,
    =<L=, =<c=, =<e=, ...
***** In case you want to play with ipython/jupyter on a recent debian :Python:
Here is what you should install:
#+begin_src shell :results output :exports both
sudo apt-get install jupyter-notebook python3-matplotlib python3-numpy
#+end_src

On my machine, I got the version 5.2.2:
#+begin_src shell :results output :exports both
jupyter-notebook --version
#+end_src

#+RESULTS:
: 5.2.2

The ipython notebook can then be run with the following command:
#+begin_src shell :results output :exports both
jupyter-notebook
#+end_src

If you also want to use R in jupyter, follow
[[https://github.com/IRkernel/IRkernel#installation][these instructio
***** 
***** In case you want to play with R/knitR/rstudio:                  :R:
Here is what you should install on debian:
#+BEGIN_SRC shell
sudo apt-get install r-base r-cran-ggplot2 r-cran-knitr
#+END_SRC
Alternatively, if the installation of =r-cran-gplot2= or =r-cran-knitr=
fails, you may want to install them locally and manually by running
the following commands in R (or Rstudio):
#+BEGIN_SRC R
install.packages("knitr")
install.packages("ggplot2")
#+END_SRC

Rstudio is unfortunately not packaged within debian so the easiest is
to download the corresponding debian package on the [[http://www.rstudio.com/ide/download/desktop][Rstudio webpage]]
and then to install it manually (depending on when you do this, you
can obviously change the version number). Here is how to install it on
an old (stable) debian or ubuntu:
#+BEGIN_SRC shell
cd /tmp/
wget https://download1.rstudio.org/rstudio-1.1.423-amd64.deb
sudo dpkg -i rstudio-1.1.423-amd64.deb
sudo apt-get -f install # to fix possibly missing dependencies
#+END_SRC
If you're running a more recent (testing or unstable) debian, you'll
probably want to use another debian package:
#+BEGIN_SRC shell
cd /tmp/
wget https://download1.rstudio.org/rstudio-xenial-1.1.423-amd64.deb
sudo dpkg -i rstudio-xenial-1.1.423-amd64.deb
#+END_SRC

** 2018-04 April
*** 2018-04-30 Monday
**** OBJECTIVES : 
***** TODO Intro : [[https://www.grid5000.fr/mediawiki/index.php/Grid5000:Home][Grid5000]] [33%]
****** DONE Request Account
****** STARTED First grasp
:LOGBOOK:
- State "STARTED"    from "TODO"       [2018-04-30 lun. 17:57]
:END:
****** TODO Execo
***** TODO Intro : [[https://github.com/alegrand/RR_webinars/blob/master/1_replicable_article_laboratory_notebook/index.org][Org-mode & Emacs]] [75%] 
****** DONE install Emacs 
*REMINDER* To launch using a specific configuration [[https://raw.githubusercontent.com/alegrand/RR_webinars/master/1_replicable_article_laboratory_notebook/init.el][init.el]]
#+BEGIN_SRC sh
emacs -q -l init.el
#+END_SRC
****** DONE install Org-mode + necessary tools
****** DONE identify key Shortcuts
****** DONE Upload Journal on [[https://github.com/HooBaeBoo/Stage-POLARIS][GitHub]]
***** TODO Discovering the topic[0%] : 
****** STARTED Readings [0/2]
:LOGBOOK:
- State "STARTED"    from "TODO"       [2018-04-30 lun. 17:56]
:END:
- [ ] Parallel and distributed simulation systems Chapter 6 : Time //
  Simulation
- [ ] Parallel algorithms A. Legrand, H. Casanova & Y. Robert
***** TODO Intro : SimGrid[33%]
****** DONE Install
****** STARTED [[http://simgrid.gforge.inria.fr/tutorials/simgrid-101.pdf][First grasp]]
:LOGBOOK:
- State "STARTED"    from "TODO"       [2018-05-02 mer. 9:27]
:END:
****** STARTED Basics [[https://www.edx.org/course/introduction-to-python-absolute-beginner][Python & Jupyter]]
:LOGBOOK:
- State "STARTED"    from "TODO"       [2018-04-30 lun. 17:56]
:END:
**** Readings Synthesis :

In order to simulate a system one could think of several solutions. In
fact, there are 2 in particular we could describe :
*SPATIAL DECOMPOSTITION* : Each logical process is to compute all
variables' values within the simulation time. This type of
decomposition will not be treated, we will focus on the following 2nd type.
*TEMPORAL DECOMPOSITION* : In this solution, time is first divided into
smaller chunks and each logical process is assigned a time chunk to
work on. Here, processes are expected to perform a simulation of the
entire system. This method however creates a problem. It wouldn't make
sense to jump from one state to another with no continuity. So we
expect those logical processes to come up with matching boundary
values. When simulating to know how a process is going to end I need
to simulate it. But that would destroy everything. We call this the
state-matching problem and scientists came up with 3 differents
solving approaches. First, the /fix-up computation/ : logical processes
guess randomly the final state of the previous process. If it was
wrong, it will just start over again with the right initial
state. Second and third, the /precomputation of state at specific time division
points/ and /parallel prefix computation/: If we know our system very
well or if I have an equation, we could use this data to
predict their behavior. 


