# -*- mode: org -*-
# -*- coding: utf-8 -*-
#+STARTUP: overview indent inlineimages logdrawer
#+TITLE:       Journal
#+AUTHOR:      EZ-ZINE Najwa
#+LANGUAGE:    en, fr
#+TAGS: LIG(L)
#+TAGS:  OrgMode(O)
#+EXPORT_SELECT_TAGS: Blog
#+OPTIONS:   H:3 num:t toc:t \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:nil skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+COLUMNS: %25ITEM %TODO %3PRIORITY %TAGS
#+SEQ_TODO: TODO(t!) STARTED(s!) | DONE(d!) CANCELLED(c!)

* 2018
TIP : Git add commit and push (src:StackOverflow)
#+BEGIN_SRC sh
  alias gacp='echo "Enter commit message -> " && read MSG && git add . && git commit -m "$MSG" && git push'
#+END_SRC
** 2018-02 March
*** 2018-02-12 Monday

**** [[https://github.com/alegrand/RR_webinars/blob/master/1_replicable_article_laboratory_notebook/index.org][First webinar on reproducible research: litterate programming]]
***** Emacs shortcuts
Here are a few convenient emacs shortcuts for those that have never
used emacs. In all of the emacs shortcuts, =C=Ctrl=, =M=Alt/Esc= and
=S=Shift=.  Note that you may want to use two hours to follow the emacs
tutorial (=C-h t=). In the configuration file CUA keys have been
activated and allow you to use classical copy/paste (=C-c/C-v=)
shortcuts. This can be changed from the Options menu.
  - =C-x C-c= exit
  - =C-x C-s= save buffer
  - =C-g= panic mode ;) type this whenever you want to exit an awful
    series of shortcuts
  - =C-Space= start selection marker although selection with shift and
    arrows should work as well
  - =C-l= reposition the screen
  - =C-_= (or =C-z= if CUA keys have been activated)
  - =C-s= search
  - =M-%= replace
  - =C-x C-h= get the list of emacs shortcuts
  - =C-c C-h= get the list of emacs shortcuts considering the mode you are
    currently using (e.g., C, Lisp, org, ...)
  There are a bunch of cheatsheets also available out there (e.g.,
  [[http://www.shortcutworld.com/en/linux/Emacs_23.2.1.html][this one for emacs]] and [[http://orgmode.org/orgcard.txt][this one for org-mode]] or this [[http://sachachua.com/blog/wp-content/uploads/2013/05/How-to-Learn-Emacs-v2-Large.png][graphical one]]).
***** Org-mode                                                  :OrgMode:
  Many emacs shortcuts start by =C-x=. Org-mode's shortcuts generaly
  start with =C-c=.
  - =Tab= fold/unfold
  - =C-c c= capture (finish capturing with =C-c C-c=, this is explained on
    the top of the buffer that just opened)
  - =C-c C-c= do something useful here (tag, execute, ...)
  - =C-c C-o= open link
  - =C-c C-t= switch todo
  - =C-c C-e= export
  - =M-Enter= new item/section
  - =C-c a= agenda (try the =L= option)
  - =C-c C-a= attach files
  - =C-c C-d= set a deadl1ine (use =S-arrows= to navigate in the dates)
  - =A-arrows= move subtree (add shift for the whole subtree)
***** Org-mode Babel (for literate programming)                 :OrgMode:
  - =<s + tab= template for source bloc. You can easily adapt it to get
    this:
    #+BEGIN_EXAMPLE
      #+begin_src shell
      ls
      #+end_src
    #+END_EXAMPLE
    Now if you =C-c C-c=, it will execute the block.
    #+BEGIN_EXAMPLE
  #+RESULTS:
  | #journal.org# |
  | journal.html  |
  | journal.org   |
  | journal.org~  |
    #+END_EXAMPLE

  - Source blocks have many options (formatting, arguments, names,
    sessions,...), which is why I have my own shortcuts =<b + tab= bash
    block (or =B= for sessions).
    #+BEGIN_EXAMPLE
  #+begin_src shell :results output :exports both
  ls /tmp/*201*.pdf
  #+end_src

  #+RESULTS:
  : /tmp/2015_02_bordeaux_otl_tutorial.pdf
  : /tmp/2015-ASPLOS.pdf
  : /tmp/2015-Europar-Threadmap.pdf
  : /tmp/europar2016-1.pdf
  : /tmp/europar2016.pdf
  : /tmp/M2-PDES-planning-examens-janvier2016.pdf
    #+END_EXAMPLE
  - I have defined many such templates in my configuration. You can
    give a try to =<r=, =<R=, =<RR=, =<g=, =<p=, =<P=, =<m= ...
  - Some of these templates are not specific to babel: e.g., =<h=, =<l=,
    =<L=, =<c=, =<e=, ...
***** In case you want to play with ipython/jupyter on a recent debian :Python:
Here is what you should install:
#+begin_src shell :results output :exports both
sudo apt-get install jupyter-notebook python3-matplotlib python3-numpy
#+end_src

On my machine, I got the version 5.2.2:
#+begin_src shell :results output :exports both
jupyter-notebook --version
#+end_src

#+RESULTS:
: 5.2.2

The ipython notebook can then be run with the following command:
#+begin_src shell :results output :exports both
jupyter-notebook
#+end_src

If you also want to use R in jupyter, follow
[[https://github.com/IRkernel/IRkernel#installation][these instructio
*****
***** In case you want to play with R/knitR/rstudio:                  :R:
Here is what you should install on debian:
#+BEGIN_SRC shell
sudo apt-get install r-base r-cran-ggplot2 r-cran-knitr
#+END_SRC
Alternatively, if the installation of =r-cran-gplot2= or =r-cran-knitr=
fails, you may want to install them locally and manually by running
the following commands in R (or Rstudio):
#+BEGIN_SRC R
install.packages("knitr")
install.packages("ggplot2")
#+END_SRC

Rstudio is unfortunately not packaged within debian so the easiest is
to download the corresponding debian package on the [[http://www.rstudio.com/ide/download/desktop][Rstudio webpage]]
and then to install it manually (depending on when you do this, you
can obviously change the version number). Here is how to install it on
an old (stable) debian or ubuntu:
#+BEGIN_SRC shell
cd /tmp/
wget https://download1.rstudio.org/rstudio-1.1.423-amd64.deb
sudo dpkg -i rstudio-1.1.423-amd64.deb
sudo apt-get -f install # to fix possibly missing dependencies
#+END_SRC
If you're running a more recent (testing or unstable) debian, you'll
probably want to use another debian package:
#+BEGIN_SRC shell
cd /tmp/
wget https://download1.rstudio.org/rstudio-xenial-1.1.423-amd64.deb
sudo dpkg -i rstudio-xenial-1.1.423-amd64.deb
#+END_SRC

** 2018-04 April
*** 2018-04-30 Monday
**** OBJECTIVES :
***** TODO Intro : [[https://www.grid5000.fr/mediawiki/index.php/Grid5000:Home][Grid5000]] [33%]
****** DONE Request Account
****** STARTED First grasp
:LOGBOOK:
- State "STARTED"    from "TODO"       [2018-04-30 lun. 17:57]
:END:
******* When using Grid'5000, you will typically:
- connect, using SSH, to an access machine
- connect from this access machine to a site frontend
- on this site frontend, reserve resources (nodes), and connect to those nodes
****** STARTED [[http://execo.gforge.inria.fr/doc/latest-stable/][Execo]]
:LOGBOOK:
- State "STARTED"    from "TODO"       [2018-05-02 mer. 15:42]
:END:
***** DONE Intro : [[https://github.com/alegrand/RR_webinars/blob/master/1_replicable_article_laboratory_notebook/index.org][Org-mode & Emacs]] [100%]
****** DONE install Emacs
*REMINDER* To launch using a specific configuration [[https://raw.githubusercontent.com/alegrand/RR_webinars/master/1_replicable_article_laboratory_notebook/init.el][init.el]]
#+BEGIN_SRC sh
emacs -q -l init.el
#+END_SRC
****** DONE install Org-mode + necessary tools
****** DONE identify key Shortcuts
****** DONE Upload Journal on [[https://github.com/HooBaeBoo/Stage-POLARIS][GitHub]]
***** TODO Discovering the topic[0%] :
****** STARTED Readings [1/2]
:LOGBOOK:
- State "STARTED"    from "TODO"       [2018-04-30 lun. 17:56]
:END:
- [X] [[http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.471.6593&rep=rep1&type=pdf][Parallel and distributed simulation systems]] Chapter 6 : Time //
  Simulation [[https://www.acm-sigsim-mskr.org/Courseware/Fujimoto/Slides/FujimotoSlides-16-TimeParallelSimulations1.pdf][Slides]]1 [[https://www.acm-sigsim-mskr.org/Courseware/Fujimoto/Slides/FujimotoSlides-17-TimeParallelSimulations2.pdf][Slides2]]
- [ ] Parallel algorithms A. Legrand, H. Casanova & Y. Robert
***** TODO Intro : SimGrid[66%]
****** DONE [[http://simgrid.gforge.inria.fr/simgrid/latest/doc/install.html][Install]]
****** DONE [[http://simgrid.gforge.inria.fr/tutorials.php][First grasp]]
:LOGBOOK:
- State "DONE"       from "STARTED"  [2018-05-03 jeu. 10:13]
- State "STARTED"    from "TODO"       [2018-05-02 mer. 9:27]
:END:
****** STARTED Basics [[https://www.edx.org/course/introduction-to-python-absolute-beginner][Python & Jupyter]]
:LOGBOOK:
- State "STARTED"    from "TODO"       [2018-04-30 lun. 17:56]
:END:
**** Readings Synthesis :
#+BEGIN_VERSE
In order to simulate a system one could think of several solutions. In
fact, there are 2 in particular we could describe : \\
*SPATIAL DECOMPOSTITION* : Each logical process is to compute all
variables' values within the simulation time. This type of
decomposition will not be treated, we will focus on the following 2nd type.\\
*TEMPORAL DECOMPOSITION* : In this solution, time is first divided into
smaller chunks and each logical process is assigned a time chunk to
work on. Here, processes are expected to perform a simulation of the
entire system. This method however creates a problem. It wouldn't make
sense to jump from one state to another with no continuity. So we
expect those logical processes to come up with matching boundary
values. When simulating to know how a process is going to end I need
to simulate it. But that would destroy everything. We call this the
state-matching problem and scientists came up with 3 differents
solving approaches. First, the /fix-up computation/ : logical processes
guess randomly the final state of the previous process. If it was
wrong, it will just start over again with the right initial
state. Second and third, the /precomputation of state at specific time division
points/ and /parallel prefix computation/: If we know our system very
well or if I have an equation, we could use this data to
predict their behavior.
#+END_VERSE
** 2018-05 May
*** 2018-05-02 Wednesday
**** SimGrid :
- MSG : Simple application-level simulator
- SimDag : Directed Acyclic Graph (DAG), we assume vertices represent tasks and edges represents constraints and/or data movements between tasks.
We then use it to know what happened with the tasks. Who did what. It's very useful when simulation parallel application. See example ex1-2.c.
To describe the graph we can either directly detail them in the c file or use the 2 loaders SimDag comes with :
DAX or DOT. While DAX is a xml file to fill with general information such as tasks' names, I/O files, DOT format is a bit more human-friendly. DOT format will have you describe the graph with arrows, brackets. A more intuitive approach.


#+CAPTION: example of DAX file
file:Ressources/img/DAX.png

#+CAPTION: example of DOT file
[[file:Ressources/img/DOT.png]]

*REMINDER* How to call the loader : ~SD_daxload(filename) / SD_dotload(filename)~
- Platform : /Understood how it works and what it represents but have no
  clue what it's for. Feel like I'm missing the point./
  - XML based description
  - Lua based description
- SMPI : Reimplementation of MPI on top of SimGrid. The laptop perform all computations with faked communications.
[[https://www.ibm.com/support/knowledgecenter/en/SSZTET_10.1.0/smpi02/smpi02_host_list.html][Hostfile explanation]]
- MPI : Message Passing Interface (MPI)
#+BEGIN_QUOTE
A communication protocol for programming parallel computers.
#+END_QUOTE
(src : Wikipedia)
*** 2018-05-03 Thursday
**** [[https://www.grid5000.fr/mediawiki/index.php/Execo_Practical_Session#Overview][Execo]] & [[https://www.grid5000.fr/mediawiki/index.php/Getting_Started][Grid5000]]:
/Note/ : Sample configuration file not found but there are config.py files.
- Execo : Python API for controling unix process (local/remote, standalone/parallel).
- Execo_ g5k : Set of tools and extensions for Grid5000 testbed.
- Execo engine : tools to ease development of computer sciences experiments
***** Conduct :
We start by checking the installation using iPython tunning a simple 'Hello world test'
#+BEGIN_SRC sh
ipython
import execo
execo.Process("echo 'hello world').run().stdout
out : hello world
#+END_SRC
- We're about to need Grid'5000. We launch it.
#+BEGIN_SRC sh
 ssh nezzine@access.grid5000.fr
#+END_SRC
*Problem encountered* : Permission denied (publickey).\\
*Solution* : Create a key and add it to Grid'5000 Account

*** MEETING NOTES FROM F.PERRONNIN & A.LEGRAND :
**** Discussions avec Florence et Arnaud
***** Notebook jupyter:
****** Install
Surtout ce premier bout de code
#+begin_src sh :results output :exports both
sudo apt-get install jupyter-notebook
sudo apt-get install python3-pip
sudo apt-get install python3-matplotlib python3-numpy
#+end_src

Then following https://github.com/kirbs-/hide_code (note sure this is
as useful as I thought though :()
#+begin_src sh :results output :exports both
sudo pip3 install hide_code
sudo jupyter-nbextension  install --py hide_code
jupyter-nbextension  enable --py hide_code
jupyter-serverextension enable --py hide_code
#+end_src

Pour que l'export via latex fonctionne:
#+begin_src shell :results output :exports both
sudo apt-get install wkhtmltopdf
sudo apt-get install texlive-xetex
#+end_src

Pour avoir R:
#+begin_src shell :results output :exports both
sudo apt-get python3-rpy2
#+end_src

Pour avoir le [[https://github.com/brospars/nb-git][git push/pull dans
les notebooks]]:
#+begin_src shell :results output :exports both
jupyter nbextension install
https://raw.githubusercontent.com/brospars/nb-git/master/nb-git.js
jupyter nbextension enable nb-git
#+end_src

Autres extensions (code-folding):
https://stackoverflow.com/questions/33159518/collapse-cell-in-jupyter-notebook
#+begin_src shell :results output :exports both
pip3 install jupyter_contrib_nbextensions
# jupyter contrib nbextension install --user # not done yet
#+end_src

https://stackoverflow.com/questions/33159518/collapse-cell-in-jupyter-notebook
(collapsible headings)

Pour avoir le kernel R (from https://irkernel.github.io/installation/):
#+begin_src R :results output graphics :file (org-babel-temp-file
"figure" ".png") :exports both :width 600 :height 400 :session *R*
install.packages(c('repr', 'IRdisplay', 'evaluate', 'crayon', 'pbdZMQ',
'devtools', 'uuid', 'digest'))
devtools::install_github('IRkernel/IRkernel')
# Don’t forget step 2/2!
IRkernel::installspec()
#+end_src

****** Export
http://markus-beuckelmann.de/blog/customizing-nbconvert-pdf.html
https://nbconvert.readthedocs.io/en/latest/

#+begin_src sh :results output :exports both
ipython3 nbconvert --to pdf Untitled.ipynb
#+end_src
****** Pour aller plus loin
- https://www.dataquest.io/blog/jupyter-notebook-tips-tricks-shortcuts/
***** Expériences EXECO:
  - https://www.grid5000.fr/mediawiki/index.php/BigData_hands-on_tutorial
  -
https://gitlab.inria.fr/grid5000/bigdata-tutorial/blob/master/Experiment.ipynb
**** ssh et screen
Dans ton ~.ssh/config~:
#+BEGIN_EXAMPLE
#######################################
# Config globale

#Host *
ForwardAgent yes
ForwardX11 yes

Host *.g5k
   User alegrand
   ProxyCommand ssh alegrand@access.grid5000.fr "nc  -w 60 `basename %h
.g5k` %p"
   RemoteForward 1947 scm.gforge.inria.fr:22
#+END_EXAMPLE

Bien utiliser =screen= pour avoir des codes distants persistants:
- =C-a C-d= pour détacher le screen
- =screen -a -r= pour le rattacher quand on revient
**** SimGrid
- examples/smpi/NAS/ep.c
- examples/platforms/*.xml

*** MEETING SYNTHESIS:
- Jupyter allows taking notes similarly to RStudio. We can dedicate cells to a specific language.
*CAREFUL* : Avoid falling into easy traps like x = x + 10.
- Python : it allows drawing graphs again similarly to r with its plot function.
- Grid5000 : RECOMMENDED CONFIGURATION :
  - **** ssh et screen
Dans ton ~.ssh/config~:
#+BEGIN_EXAMPLE
#######################################
# Config globale

#Host *
ForwardAgent yes
ForwardX11 yes

Host *.g5k
   User alegrand
   ProxyCommand ssh alegrand@access.grid5000.fr "nc  -w 60 `basename %h
.g5k` %p"
   RemoteForward 1947 scm.gforge.inria.fr:22
#+END_EXAMPLE

- SimGrid :In the future, we will focus on SMPI/MPI.
  - SIMIX : creating processes
  - MPI : Communication protocol send/receive, include smart types (example : if I want a column from a matrix, considering the matrix linear organization, I need to send regularly-spaced values), there's also broadcast
  - SMPI : is just a simulation. When I do Smpicc followed by smpirun, things will be excecuted locally. How?
    - I can describe the plateform using a xml file.
    - *Advise* : Take a look at NAS.
- *Clue* : to put in place the time parallelization will consist in running with smpirun and all settings needed and I will need to state for each process : when to start. [Nicol's algorithm]
- Tools that could be needed in the future : /screen/ (for persitance).
*** 2018-05-04 Friday :
**** Installation Python & Jupyter :
#+BEGIN_SRC sh
sudo apt-get install python3-pip
sudo apt-get install python3-matplotlib python3-numpy
sudo apt-get install jupyter-notebook
#+END_SRC
*Problem encountered* : package jupyter-notebook doesn't exists
*Solution* :
#+BEGIN_SRC sh
pip install --user jupyter
#+END_SRC
/Note/ : --user is used to install in a directory that doesn't requires root permissions.
*CAREFUL* Avoid doing :
#+BEGIN_SRC sh
pip install --upgrade pip
#+END_SRC
as it creates [[https://github.com/pypa/pip/issues/5221][damage]].
**** Configuration .ssh/config
/Cf Meeting with Florence & Arnaud/
*Problem encountered* : X11 forwarding request failed on channel 0
*Solution* : PENDING, tried : [[https://www.cyberciti.biz/faq/how-to-fix-x11-forwarding-request-failed-on-channel-0/][this]] : Unauthorized actions, will be reported.
Retried : Worked! You'll find a template in ~Ressources/templates/ssh_config~
**** [[https://www.grid5000.fr/mediawiki/images/G5k_cheat_sheet.pdf][Grid5000 Key commands]] :
***** Basics :
- To connect :
#+BEGIN_SRC sh
ssh login@access.grid5000.fr
OR (if ssh config done)
ssh site.g5k
#+END_SRC
- Access a specific site (after connection):
#+BEGIN_SRC sh
ssh site
#+END_SRC
- Copy file to site home directory :
#+BEGIN_SRC sh
scp myfile.c login@access.grid5000.fr:site/targetdirectory/mytargetfile.c
#+END_SRC
***** Resources :
- Reserve NBR hosts in interactive mode :
ASAP :
#+BEGIN_SRC sh
oarsub -l host/nodes=NBR -I
#+END_SRC
At specific time :
#+BEGIN_SRC sh
oarsub -l nodes=3 -r 'YYYY-MM-DD HH:MM:SS'
#+END_SRC
- Terminate reservation :
#+BEGIN_SRC sh
exit
#+END_SRC
- Switch hosts :
#+BEGIN_SRC sh
oarsh [name of machine I want to switch to]
#+END_SRC
- List all hosts in my reservation :
#+BEGIN_SRC sh
uniq $OAR_NODEFILE
#+END_SRC
- Delete job :
#+BEGIN_SRC sh
oardel [job id]
#+END_SRC
- Selection of resources :
#+BEGIN_SRC sh
oarsub -p "WANTED SETTINGS" -l nodes=nbr_nodes_wanted, walltime=expected_duration[HH:MM:SS]
#+END_SRC
-Extending reservation :
#+BEGIN_SRC sh
oarwalltime job_id +time_wanted
#+END_SRC
- Check detailed infos :
#+BEGIN_SRC sh
oarstat -u login -f
#+END_SRC
- TIP :
  - Avoid termination :
#+BEGIN_SRC sh
oarsub "sleep 10d"
oarsub -C ~OAR_JOB_ID~
#+END_SRC

*** 2018-05-07 Monday : Manipulations & exercices.
[[https://www.grid5000.fr/mediawiki/index.php/BigData_hands-on_tutorial][BigData hands-on tutorial]]:
#+BEGIN_SRC sh
ssh nancy.g5k
git clone https://gitlab.inria.fr/grid5000/bigdata-tutorial.git
cd bigdata-tutorial/kameleon
storage5k -a add -l chunks=3,walltime=24
pip3 install --user jupyter
echo 'export PATH=$PATH:~/.local/bin/' >> ~/.bashrc && . ~/.bashrc
jupyter notebook --ip=$(hostname -f)
#+END_SRC
G5k VPN setting : (src : Grid5000.fr)
-To start using Grid'5000 VPN, you first need to get a certificate:
Go to your account management page, select "My account" and from the "Actions" drop-down list, select "Generate VPN certificate".*
To generate a new certificate click on "Generate from Passphrase" (recommended).
If you generated your certificate and private key your self, select "Sign public key".
Your certificate will appear at the bottom of the page.
Click on "Download Files" to download an archive which includes the certificates and the configuration file needed to establish the VPN connexion.
You must extract the archive content on your workstation.
Please choose a secure place to store those files: an attacker could use them to steal your identity in Grid'5000.
From the folder :
#+BEGIN_SRC sh
sudo apt install openvpn
sudo openvpn Grid5000_VPN.ovpn
#+END_SRC
*PROBLEM* :
SOLUTION 1 -> Launching a connection via using command lines:
Changes were required to the config file :
dev tap -> dev tun
#+BEGIN_SRC sh
sudo openvpn ~Grid5000_VPN.ovpn~
#+END_SRC
Problem : The connection test fails.

SOLUTION 2 -> [[https://www.grid5000.fr/mediawiki/index.php/VPN#Launch_a_connection][Lauching a connection via the network-manager]] :
#+BEGING_SRC sh
sudo apt install network-manager-openvpn-gnome
#+END_SRC

UDP didn't work -> switching to TCP.
Both seem to be working BUT :
 ~ERR_CONNECTION_TIMED_OUT~
Connection never established!

SOLUTION 3 -> OpenSSH SOCKS proxy

Execo practical session :
Following the guide, several problems arose :
- file:Ressources/img/execo_fail.png
Solution : changing number of nodes.
-

- MPi : first manipulation of MPI on Grid5k
Without execo :
#+BEGIN_SRC sh
mpicc source.c -o app
mpirun -H graphene-23.nancy.grid5000.fr,graphene-21.nancy.grid5000.fr ./app
#+END_SRC
Output : Got 42 from rank 0
*** 2018-05-09 Wednesday
Problem solved : G5kVPN  & Jupyter work! Following same steps!
**** Pratical session part 2 MPI & Automation :
***** [[https://www.grid5000.fr/mediawiki/index.php/Run_MPI_On_Grid%275000][MPI]] :
Found a good complete tutorial on basic MPI knowledge made by Wes Kendall (src www.mpitutorial.com)
****** Running MPI -> Hello world Grid5k : See ~mpi_hello_world.c~
We reserve several nodes and get their names
#+BEGIN_SRC sh
oarsub -l nodes=2 -I
uniq $OAR_NODE_FILE
#+END_SRC
/NOTE/ : Why does it take so much time to get names?
Or with execo :
#+BEGIN_SRC python
from execo import *
from execo_g5k import *
from execo_engine import *
jobs  = oarsub([(OarSubmission("cluster=1/nodes=2", walltime=3600, job_type="allow_classic_ssh"), "lyon")])
job_id, site = jobs[0]
nodes = get_oar_job_nodes(job_id, site)
nodes
#+END_SRC

Then we need to compile and run the code
#+BEGIN_SRC sh
mpicc mpi_hello_world.c -o app
mpirun -H NAME1 NAME2 NAME3 ./app
OR
mpirun -hostfile hostfile.txt ./app
OR (if single machine)
mpirun ./app
#+END_SRC
OUTPUT : Hello world from processor graphene-66.nancy.grid5000.fr, rank 0 out of 4 processors.
****** Running MPI -> MPI locally :
#+BEGIN_SRC sh
mpicc mpi_hello_world.c -o mpi_hello_world
mpirun mpi_hello_world
OR
mpirun -hostfile hostfile mpi_hello_world
(HOSTFILE contains name of your laptop)
#+END_SRC
****** MPI [[https://www.youtube.com/watch?v=mzfVimVbguQ][Basic knowledge]] :
- MPI Communicators (1 per group of processes):
  - ~MPI_COMM_WORLD :~ All process become part of a single communicator. They can now communicate with each other
  - Rank : Each process has a unique rank (communicator). Often rank 0 is associated with master.
  - Message tag : allows differentiation between types of messages.
  - Synchronous/Asynchronous : Wait and blocking when synchronous unlike async.
  - P2P/Group communications : GC includes broadcast, reduce, scatter... functions
    - Reduce : gathering values into one of the processes by some operation.
    - Gather : gather values into a buffer in the root process.
    - Scatter : Opposite of what gather does.
    - Broadcast
****** SMPI :
- Confusing. Runs on a single node.Reduce memory footprint and simulation time.
- Testing examples from [[ https://github.com/frs69wq/simgrid.git][here]]
*PROBLEM* : can't compile :
#+BEGIN_SRC sh
smpicc -O2 -o ../bin/ep.A.1 ep.o randlc.o
/usr/bin/ld : ne peut ouvrir le fichier de sortie ../bin/ep.A.1 : Aucun fichier ou dossier de ce type
collect2: error: ld returned 1 exit status
#+END_SRC
*** 2018-05-11 Friday : SMPI
**** Since it works on Grid5k : [[https://www.grid5000.fr/mediawiki/index.php/Getting_Started#Deploying_your_nodes_to_get_root_access_and_create_your_own_experimental_environment][Short Guide]] to setting up the environnement
#+BEGIN_SRC sh
ssh site.g5k
oarsub -I -l nodes=1,walltime=3:00 -t deploy
kadeploy3 -f $OAR_NODE_FILE -e debian9-x64-base -k
ssh root@machine
sudo apt-get install simgrid git
#+END_SRC
**** First programm :
We imagine a first program with a random number of process.
The goal is to make them wait until they receive a message from process with lower rank, display their identity and send message to higher rank.
file:Ressources/img/circle_desc.png
The code can be found under ~SimGrid/examples/SMPI/Circle_discussion~
*PROBLEMS ENCOUNTERED* :
****** XML file <!DOCTYPE>:
#+BEGIN_QUOTE
Invalid XML (XML input line 2, state 2): Bad declaration <!DOCTYPE platform SYSTEM "http://simgrid.gforge.inria.fr/simgrid.dtd">
If your are using a XML v3 file (check the version attribute in <platform>), please update it with ~tools/simgrid_update_xml.pl~
#+END_QUOTE
******* Solution : Weirdest problem. What I did is that I changed version to 3, used the ~simgrid_update_xml~ and it just worked... somehow.
****** XML file power & speed :
#+BEGIN_QUOTE
Invalid XML (XML input line 6, state 41): Bad attribute `power' in `cluster' element start tag.
Invalid XML (XML input line 5, state 41): Required attribute `speed' not set for `cluster' element.
#+END_QUOTE
******* Solution : replacing power with speed
****** ~MPI_INIT~ :
#+BEGIN_QUOTE
~[root/CRITICAL] smpi_process_data() returned nullptr. You probably gave a nullptr parameter to MPI_Init. Although it's required by MPI-2, this is currently not supported by SMPI.~
#+END_QUOTE
******* Solution : Replace ~MPI_INIT(NULL, NULL)~ with ~MPI_INIT(&argc,&argv)~

Results :
- Terminal :
file:Ressources/img/circle_term.png
- Vite :
file:Ressources/img/circle_vite.png
*** 2018-05-14 Monday : Time parallel simulation
Cf cahier de notes.
Questions :
- What kind of network?
- Compare to seq?
- Can I simulate whatever I want?
=> Will have to state who starts and when.
*** 2018-05-15 Tuesday
**** Instructions A.Legrand

  https://simgrid.github.io/SMPI_CourseWare/

Sinon, dans ton journal, je vois que tu captures (en png) des sorties de
terminaux. N'hésite pas à utiliser le support org-mode pour ça, c'est
plus pratique. Tu fais "<b" puis "tab" et ça complète en un bloc shell
que tu peux exécuter avec C-c C-c. N'hésite pas à passer me voir si tu
as besoin.

Pour résumer la discussion d'hier:
- Je te disais qu'il n'y a probablement pas besoin de déployer ton image
(c'est plus lent et ça induit des erreurs potentielles). J'ai
probablement tort. Il est probable qu'au final, ça te simplifiera la vie
car l'environnement par défaut de G5K est quand même un peu minimal. Tu
pourras plus facilement installer ce dont tu as besoin. Donc continue
comme tu as fait, c'est très bien.
- [X] Installe SimGrid à partir des sources
#+BEGIN_SRC sh
apt-get install libboost-dev libboost-context-dev
apt-get install default-jdk libgcj16-dev
apt-get install liblua5.3-dev lua5.3
#+END_SRC sh

#+RESULTS:

[[https://gforge.inria.fr/frs/?group_id=12][Download]]
#+BEGIN_SRC sh
tar xf SimGrid-3.18.tar.gz
cd SimGrid-3.18
cmake -DCMAKE_INSTALL_PREFIX=/opt/simgrid .
make
make install
#+END_SRC
- [X] Simule ep avec griffon.xml. C'est un exemple sans intérêt mais trivial
à mettre en place. Normalement, maintenant, tu sais faire ça en local
sur ta machine.
#+BEGIN_SRC sh
cd examples/smpi/NAS
make ep NPROCS=1 CLASS=S
#+END_SRC
*PROBLEM* : Unable to find the executable
*SOLUTION* : Isolate needed code (Cf A.Legrand -> Minimalistic commit)
- [X] Déploie un jupyter-notebook sur une frontend de G5K et vérifie que tu
arrives bien à t'y connecter depuis ton laptop. See Monday 07/05
#+BEGIN_SRC sh
pip3 install --user jupyter
echo 'export PATH=$PATH:~/.local/bin/' >> ~/.bashrc && . ~/.bashrc
jupyter notebook --ip=$(hostname -f)
#+END_SRC
- [X] Réserve (dans le notebook) 4 ou 5 noeuds d'un cluster.
Cf Notebook : EP.
- [X] Lance smpirun ep à coup de execo.action.Remote
- [X] récupère les sorties standard. (via ~smpi_results.txt)~
- On verra ensuite ensemble comment bien sauvegarder/organiser tout ça.

***** Note meeting with teachers :
- Ccmake, cmake, make : Cf cahier de notes.
#+begin_src shell :results output :exports both
sudo apt-get install cmake-curses-gui
#+end_src

#+RESULTS:
*** 2018-05-16 Wednesday / 2018-05-17 Thursday
The class execo.action.Remote allows us to launch a command remotely on several hosts
For each connection requested a ssh proccess is launched.
**** [[https://www.grid5000.fr/mediawiki/index.php/Screen][Screen]] + cf Meeting notes
Ctrl+a d 
screen -r <id>
**** How do we get terminal output without using a file? Pistes : 
***** Screen :
If we have 2 machines, lets say A and B. To have a single terminal for both, we would need to do these steps :
#+begin_src shell :results output :exports both
A : screen -q
B : ssh A
B : screen -ls
A : screen -x <id>
#+end_src
***** Ttylog
*** 2018-05-18 Friday MEETING VISIO
**** Things to do :
- [ ] ~Remote_smpi_env~ don't need to be root
- [ ] Save image after deployment and use it next times to save time
- [ ] Clone git repository on G5k frontend
- [ ] Remote Emacs (ForwardX11) or sshfs
#+begin_src shell :results output :exports both
mount  -t ssh
#+end_src
Allow accessing remote repositories (those on G5k) locally.
- [ ] Organize & save data :
  - [ ] Add date to name of smpi results
  - [ ] Use better structure of repositories
  - [ ] Add cell with :
#+begin_src shell :results output :exports both
git add _____.txt
git commit
#+end_src
To save results !
- [ ] Versionning :
  - [ ] Duplicate notebook for each experiments
#+begin_src shell :results output :exports both
git copy
#+end_src
It's going to take a lot of place locally but not on gitHub!
   - [ ]  Take a few cells to indicate :
     - Experiment id
     - Git version
     - Git status
     - Software version
+ To use R : [[http://simgrid.gforge.inria.fr/contrib/R_visualization.php#org667a940][here]]

 
